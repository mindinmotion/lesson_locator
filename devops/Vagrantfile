# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure(2) do |config|
    # Every Vagrant development environment requires a box. You can search for
    # boxes at https://atlas.hashicorp.com/search.
    config.vm.box = "chef/centos-6.5"

    # Provisioning with Ansible.
    config.vm.provision :ansible do |ansible|
        ansible.playbook = "felden.yml"
    end

    # Provisioning with shell scripts.
    config.vm.provision "shell", inline: <<-SHELL
        sudo /vagrant/scripts/py_setup
        sudo /vagrant/scripts/code_deploy
    SHELL

    # Create a private network, which allows host-only access to the machine
    # using a specific IP.
    config.vm.network "private_network", ip: "10.0.0.10"

    # Share an additional folder to the guest VM. The first argument is
    # the path on the host to the actual folder. The second argument is
    # the path on the guest to mount the folder. And the optional third
    # argument is a set of non-required options.
    config.vm.synced_folder "../bin",    "/mnt/code/bin",    create: true
    config.vm.synced_folder "../data",   "/mnt/code/data",   create: true
    config.vm.synced_folder "../etc",    "/mnt/code/etc",    create: true
    config.vm.synced_folder "../python", "/mnt/code/python", create: true
    config.vm.synced_folder "../site",   "/mnt/code/site",   create: true
    config.vm.synced_folder "../test",   "/mnt/code/test",   create: true

    # Create a forwarded port mapping which allows access to a specific port
    # within the machine from a port on the host machine. In the example below,
    # accessing "localhost:8080" will access port 80 on the guest machine.
    #config.vm.network "forwarded_port", guest: 80, host: 8000
    #config.vm.network "forwarded_port", guest: 26000, host: 26000
    #config.vm.network "forwarded_port", guest: 26010, host: 26010

    # Create a public network, which generally matched to bridged network.
    # Bridged networks make the machine appear as another physical device on
    # your network.
    # config.vm.network "public_network"
end
